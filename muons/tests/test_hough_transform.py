import pytest
import astropy
from astropy.modeling.functional_models import Ring2D
import numpy as np
from muons.detection import detection
import photon_stream as ps
import muons.hough_transform_detection as ht

def test_Ring2D():
    cx = 0.0367441420512955
    cy = 0.014115910466321782
    r = 0.02084962136507589
    epsilon = np.deg2rad(0.1111)
    x = np.array([
        0.02082172, 0.02082172, 0.01983046, 0.01983046, 0.01883917,
        0.01883917, 0.01883917, 0.01883917, 0.02280411, 0.02181293,
        0.01983046, 0.02577736, 0.01784784, 0.01784784, 0.01784784,
        0.01784784, 0.01784784, 0.01685648, 0.01685648, 0.01685648,
        0.01685648, 0.01685648, 0.01090771, 0.02379524, 0.01983046,
        0.01685648, 0.01685648, 0.01685648, 0.01685648, 0.01685648,
        0.01685648, 0.01685648, 0.01685648, 0.01685648, 0.01685648,
        0.01685648, 0.01586509, 0.01586509, 0.01586509, 0.01586509,
        0.01586509, 0.01586509, 0.01586509, 0.01586509, 0.01487367,
        0.01289074, 0.02280411, 0.01784784, 0.01784784, 0.01784784,
        0.01685648, 0.01685648, 0.01685648, 0.01685648, 0.01586509,
        0.01586509, 0.01586509, 0.01586509, 0.01586509, 0.01586509,
        0.01586509, 0.01189924, 0.00694143, 0.03469431, 0.0307318 ,
        0.0277593 , 0.01883917, 0.01883917, 0.01883917, 0.01784784,
        0.01784784, 0.01784784, 0.01784784, 0.01784784, 0.01784784,
        0.01784784, 0.01685648, 0.01685648, 0.01289074, 0.03271318,
        0.02974102, 0.03469431, 0.02379524, 0.02379524, 0.02379524,
        0.02379524, 0.02379524, 0.02379524, 0.02379524, 0.02379524,
        0.02280411, 0.02280411, 0.02280411, 0.02280411, 0.02082172,
        0.02082172, 0.01983046, 0.01983046, 0.01983046, 0.01983046,
        0.01983046, 0.01983046, 0.01784784, 0.00793302, 0.03865578,
        0.03865578, 0.03865578, 0.03865578, 0.03766551, 0.03667518,
        0.03667518, 0.03667518, 0.03469431, 0.03370377, 0.03469431,
        0.03469431, 0.03469431, 0.03469431, 0.03469431, 0.03469431,
        0.03469431, 0.03469431, 0.03469431, 0.03469431, 0.03370377,
        0.03271318, 0.03271318, 0.03271318, 0.03271318, 0.03271318,
        0.03271318, 0.03271318, 0.03271318, 0.03172251, 0.03172251,
        0.03172251, 0.03172251, 0.03172251, 0.03172251, 0.03172251,
        0.03172251, 0.0307318 , 0.0307318 , 0.02974102, 0.02974102,
        0.02974102, 0.0277593 , 0.0277593 , 0.0277593 , 0.0277593 ,
        0.0277593 , 0.0277593 , 0.0277593 , 0.0277593 , 0.0277593 ,
        0.02676835, 0.02676835, 0.02676835, 0.02676835, 0.02676835,
        0.02676835, 0.02676835, 0.02478632, 0.02478632, 0.02478632,
        0.02478632, 0.03568478, 0.0307318 , 0.0277593 , 0.0277593 ,
        0.02280411
    ])
    y = np.array([
        0.02748184,  0.02748184,  0.02575754,  0.02575754,  0.0240331 ,
        0.0240331 ,  0.0240331 ,  0.0240331 ,  0.03091013,  0.03261411,
        0.03261411,  0.02232835,  0.02232835,  0.02232835,  0.02232835,
        0.02232835,  0.02232835,  0.02060364,  0.02060364,  0.02060364,
        0.02060364,  0.02060364,  0.0240331 ,  0.01544869,  0.01544869,
        0.01374341,  0.01374341,  0.01374341,  0.01374341,  0.01374341,
        0.01717372,  0.01717372,  0.01717372,  0.01717372,  0.01717372,
        0.01717372,  0.01544869,  0.01544869,  0.01544869,  0.01544869,
        0.01544869,  0.01544869,  0.01544869,  0.01544869,  0.01374341,
        0.01374341,  0.01031279,  0.00858747,  0.00858747,  0.00858747,
        0.01031279,  0.01031279,  0.01031279,  0.01031279,  0.01201822,
        0.01201822,  0.01201822,  0.01201822,  0.01201822,  0.01201822,
        0.01201822,  0.00515653,  0.00343109,  0.00343109,  0.0068621 ,
        0.00515653,  0.00343109,  0.00343109,  0.00343109,  0.00515653,
        0.00515653,  0.00515653,  0.00515653,  0.00515653,  0.00515653,
        0.00515653,  0.0068621 ,  0.0068621 ,  0.0068621 ,  0.        ,
        0.00172547,  0.        , -0.00172547, -0.00172547, -0.00172547,
       -0.00172547, -0.00172547, -0.00172547, -0.00172547, -0.00172547,
        0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
        0.        ,  0.00172547,  0.00172547,  0.00172547,  0.00172547,
        0.00172547,  0.00172547, -0.00172547,  0.00172547, -0.0068621 ,
       -0.0068621 , -0.0068621 , -0.00343109, -0.00858747, -0.0068621 ,
       -0.0068621 , -0.0068621 , -0.01031279, -0.00858747, -0.0068621 ,
       -0.0068621 , -0.0068621 , -0.0068621 , -0.0068621 , -0.0068621 ,
       -0.0068621 , -0.0068621 , -0.0068621 , -0.0068621 , -0.00515653,
       -0.0068621 , -0.0068621 , -0.0068621 , -0.0068621 , -0.0068621 ,
       -0.0068621 , -0.0068621 , -0.00343109, -0.00515653, -0.00515653,
       -0.00515653, -0.00515653, -0.00515653, -0.00515653, -0.00515653,
       -0.00515653, -0.0068621 , -0.0068621 , -0.00515653, -0.00515653,
       -0.00515653, -0.00515653, -0.00515653, -0.00515653, -0.00515653,
       -0.00515653, -0.00515653, -0.00515653, -0.00515653, -0.00515653,
       -0.00343109, -0.00343109, -0.00343109, -0.00343109, -0.00343109,
       -0.00343109, -0.00343109, -0.00343109, -0.00343109, -0.00343109,
       -0.00343109, -0.01201822, -0.01374341, -0.01201822, -0.01201822,
       -0.01031279
    ])
    result = Ring2D.evaluate(
        x=x,
        y=y,
        x_0=cx,
        y_0=cy,
        amplitude=1,
        r_in=r - epsilon,
        width=2*epsilon
    )
    assert np.array(result).shape[0] == x.shape[0]
    assert np.array(result).max() > 0


def test_interpretHoughSpace():
    houghSpace = np.array([
        [np.array([0,1,2]), np.array([3,8,5]), np.array([6,7,4])],
        [np.array([0,1,2]), np.array([3,9,5]), np.array([6,7,4])],
        [np.array([0,1,2]), np.array([3,10,5]), np.array([6,7,4])]])
    np.testing.assert_equal(
        ht.interpretHoughSpace(houghSpace),
        (2,1,1)
    )


